"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const get_scope_differences_1 = require("./get-scope-differences");
const json_schema_diff_1 = require("./json-schema-diff");
exports.findDifferencesInRequestBodies = (sourceRequestBody, destinationRequestBody) => __awaiter(this, void 0, void 0, function* () {
    const diffResults = yield json_schema_diff_1.getSchemaDifferences(sourceRequestBody, destinationRequestBody);
    const requestBodyScopeOptions = {
        addedJsonSchema: diffResults.addedJsonSchema,
        additionsFound: diffResults.additionsFound,
        destinationScope: destinationRequestBody,
        propertyName: 'request.body.scope',
        removalsFound: diffResults.removalsFound,
        removedJsonSchema: diffResults.removedJsonSchema,
        sourceScope: sourceRequestBody
    };
    const addedScopeDifferences = get_scope_differences_1.getScopeAddDifferences(requestBodyScopeOptions);
    const removedScopeDifferences = get_scope_differences_1.getScopeRemoveDifferences(requestBodyScopeOptions);
    return [...addedScopeDifferences, ...removedScopeDifferences];
});
