import {CoreRepresentationJsonSchema, RepresentationJsonSchema, SchemaProperties, Subset} from '../set';
import {complementObjectSubsetConfig} from './object-subset/complement-object-subset-config';
import {intersectObjectSubsetConfig} from './object-subset/intersect-object-subset-config';
import {ObjectSubsetConfig, ParsedPropertiesKeyword} from './object-subset/object-subset-config';
import {objectSubsetConfigHasContradictions} from './object-subset/object-subset-config-has-contradictions';
import {simplifyObjectSubsetConfig} from './object-subset/simplify-object-subset-config';
import {AllSubset, EmptySubset} from './subset';

class SomeObjectSubset implements Subset<'object'> {
    private static toSchemaProperties(properties: ParsedPropertiesKeyword): SchemaProperties {
        const schemaProperties: SchemaProperties = {};

        for (const propertyName of Object.keys(properties)) {
            schemaProperties[propertyName] = properties[propertyName].toJsonSchema();
        }

        return schemaProperties;
    }
    public readonly setType = 'object';

    public readonly type = 'some';

    public constructor(private readonly config: ObjectSubsetConfig) {
    }

    public get properties() {
        return this.config.properties;
    }

    public complement(): Array<Subset<'object'>> {
        return complementObjectSubsetConfig(this.config).map(createObjectSubsetFromConfig);
    }

    public intersect(other: Subset<'object'>): Subset<'object'> {
        return other.intersectWithSome(this);
    }

    public intersectWithSome(other: SomeObjectSubset): Subset<'object'> {
        return createObjectSubsetFromConfig(intersectObjectSubsetConfig(this.config, other.config));
    }

    public toJsonSchema(): RepresentationJsonSchema {
        return {
            additionalProperties: this.config.additionalProperties.toJsonSchema(),
            maxProperties: this.config.maxProperties,
            minProperties: this.config.minProperties,
            properties: SomeObjectSubset.toSchemaProperties(this.config.properties),
            required: this.config.required,
            type: ['object'],
            ...this.notJsonSchema()
        };
    }

    private notJsonSchema(): CoreRepresentationJsonSchema {
        if (this.config.not) {
            return {
                not: {
                    additionalProperties: this.config.not.additionalProperties.toJsonSchema(),
                    properties: SomeObjectSubset.toSchemaProperties(this.config.not.properties),
                    type: ['object']
                }
            };
        }
        return {};
    }

}

export const allObjectSubset = new AllSubset('object');
export const emptyObjectSubset = new EmptySubset('object');
export const createObjectSubsetFromConfig = (config: ObjectSubsetConfig): Subset<'object'> => {
    const simplifiedConfig = simplifyObjectSubsetConfig(config);

    return objectSubsetConfigHasContradictions(simplifiedConfig)
        ? emptyObjectSubset
        : new SomeObjectSubset(simplifiedConfig);
};
