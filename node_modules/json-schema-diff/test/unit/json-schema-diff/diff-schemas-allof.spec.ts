import {JsonSchema} from 'json-schema-spec-types';
import {invokeDiff} from '../support/invoke-diff';

describe('diff-schemas allOf', () => {
    it('should find no differences when a schema is wrapped in allOf', async () => {
        const sourceSchema: JsonSchema = {
            type: 'string'
        };
        const destinationSchema: JsonSchema = {
            allOf: [
                {type: 'string'}
            ]
        };

        const diffResult = await invokeDiff(sourceSchema, destinationSchema);

        expect(diffResult.addedJsonSchema).toEqual(false);
        expect(diffResult.removedJsonSchema).toEqual(false);
    });

    it('should find no difference when a schema is broken apart using allOf', async () => {
        const sourceSchema: JsonSchema = {
            properties: {
                first: {
                    type: 'string'
                },
                last: {
                    type: 'string'
                }
            },
            type: 'object'
        };
        const destinationSchema: JsonSchema = {
            allOf: [
                {
                    properties: {
                        first: {
                            type: 'string'
                        }
                    },
                    type: 'object'
                },
                {
                    properties: {
                        last: {
                            type: 'string'
                        }
                    },
                    type: 'object'
                }
            ]
        };

        const diffResult = await invokeDiff(sourceSchema, destinationSchema);

        expect(diffResult.addedJsonSchema).toEqual(false);
        expect(diffResult.removedJsonSchema).toEqual(false);
    });

    it('should consider type contradictions within allOf to accept nothing', async () => {
        const sourceSchema: JsonSchema = {
            allOf: [
                {type: 'number'},
                {type: 'string'}
            ]
        };
        const destinationSchema: JsonSchema = false;

        const diffResult = await invokeDiff(sourceSchema, destinationSchema);

        expect(diffResult.addedJsonSchema).toEqual(false);
        expect(diffResult.removedJsonSchema).toEqual(false);
    });

    it('should merge together type keywords with the allOf schemas', async () => {
        const sourceSchema: JsonSchema = {
            allOf: [
                {type: 'number'}
            ],
            type: ['number', 'string']
        };
        const destinationSchema: JsonSchema = {type: 'number'};

        const diffResult = await invokeDiff(sourceSchema, destinationSchema);

        expect(diffResult.addedJsonSchema).toEqual(false);
        expect(diffResult.removedJsonSchema).toEqual(false);
    });

    it('should merge together nested allOf schemas', async () => {
        const sourceSchema: JsonSchema = {
            allOf: [
                {
                    allOf: [
                        {type: ['number', 'string', 'boolean']},
                        {type: ['number', 'string']}
                    ]
                },
                {
                    allOf: [
                        {type: ['number', 'string', 'boolean', 'array']},
                        {type: ['string']}
                    ]
                }
            ]
        };
        const destinationSchema: JsonSchema = {type: 'string'};

        const diffResult = await invokeDiff(sourceSchema, destinationSchema);

        expect(diffResult.addedJsonSchema).toEqual(false);
        expect(diffResult.removedJsonSchema).toEqual(false);
    });
});
